name: tests

on:
  push:
    # Avoid using all the resources/limits available by checking only
    # relevant branches and tags. Other branches can be checked via PRs.
    # branches: [main]
    tags: ['v[0-9]*', '[0-9]+.[0-9]+*']  # Match tags that resemble a version
  pull_request:
    paths: ['.github/workflows/ci.yml', 'pyproject.toml', 'uv.lock'] # Added pyproject.toml and uv.lock
  workflow_dispatch:  # Allow manually triggering the workflow
  schedule:
    # Run roughly every 15 days at 00:00 UTC
    # (useful to check if updates on dependencies break the package)
    - cron: '0 0 1,16 * *'

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref_type }}-
    ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      wheel-distribution: ${{ steps.wheel-distribution.outputs.path }}
    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 0}  # deep clone for setuptools-scm
      - uses: actions/setup-python@v5
        with: {python-version: "3.12"}
      - uses: astral-sh/setup-uv@v5
      - name: Install dependencies
        run: uv pip install .[dev] --system
      - name: Run static analysis and format checkers
        run: pre-commit run --all-files
      - name: Build package distribution files
        run: uv build
      - name: Record the path of wheel distribution
        id: wheel-distribution
        run: echo "path=$(ls dist/*.whl)" >> $GITHUB_OUTPUT
      - name: Store the distribution files for use in other stages
        # `tests` and `publish` will use the same pre-built distributions,
        # so we make sure to release the exact same package that was tested
        uses: actions/upload-artifact@v4
        with:
          name: python-distribution-files
          path: dist/
          retention-days: 1

  test:
    needs: prepare
    strategy:
      matrix:
        python:
        - "3.8"   # oldest Python supported by validate-pyproject
        - "3.x"   # newest Python that is stable
        platform:
        - ubuntu-latest
        - macos-13
        - windows-latest
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - uses: astral-sh/setup-uv@v5
      - name: Retrieve pre-built distribution files
        uses: actions/download-artifact@v4
        with: {name: python-distribution-files, path: dist/}
      - name: Install dependencies and package
        run: |
          uv pip install .[dev] --system
          uv pip install ${{ needs.prepare.outputs.wheel-distribution }} --system
      - name: Run tests
        run: pytest
      - name: Generate coverage report
        run: coverage lcov -o coverage.lcov # Use uv run
      - name: Upload partial coverage report
        uses: coverallsapp/github-action@master
        with:
          path-to-lcov: coverage.lcov
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: ${{ matrix.platform }} - py${{ matrix.python }}
          parallel: true

  finalize:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Finalize coverage report
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  publish:
    needs: finalize
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    # Add trusted publisher permission
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: {python-version: "3.12"} # Use a consistent Python version
      - uses: astral-sh/setup-uv@v5
      - name: Retrieve pre-built distribution files
        uses: actions/download-artifact@v4
        with: {name: python-distribution-files, path: dist/}
      # No need to install twine anymore
      - name: Publish Package to PyPI
        # Use uv publish directly. It uses trusted publishing by default on GitHub Actions.
        run: uv publish dist/*
